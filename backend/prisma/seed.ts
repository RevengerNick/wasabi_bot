
import { PrismaClient } from '@prisma/client';
import * as fs from 'fs';
import * as path from 'path';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prisma Client
const prisma = new PrismaClient();

// –û–ø–∏—Å—ã–≤–∞–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—à–µ–≥–æ JSON —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ç—Ä–æ–≥–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface ProductData {
    name: string;
    price: number;
    composition: string;
    imageUrl: string;
}

interface ScrapedData {
    [categoryName: string]: ProductData[];
}

async function main() {
    console.log(`üîµ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...`);

    // 1. –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º JSON-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏
    const jsonPath = path.join(__dirname, 'products.json');
    if (!fs.existsSync(jsonPath)) {
        throw new Error(`–§–∞–π–ª 'products.json' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ 'prisma'. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –µ–≥–æ —Ç—É–¥–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏.`);
    }
    const scrapedData: ScrapedData = JSON.parse(fs.readFileSync(jsonPath, 'utf-8'));
    console.log(`‚úÖ –§–∞–π–ª 'products.json' —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω.`);

    let categoryOrderIndex = 1;

    // 2. –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ JSON-—Ñ–∞–π–ª–∞
    for (const categoryName in scrapedData) {
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert: –æ–Ω –ª–∏–±–æ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å, –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é.
        // –≠—Ç–æ –¥–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ (–Ω–µ —Å–æ–∑–¥–∞—Å—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã).
        const category = await prisma.category.upsert({
            where: { name: categoryName }, // –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
            update: {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –º—ã –º–æ–∂–µ–º —á—Ç–æ-—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å.
                // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º, –µ—Å–ª–∏ –Ω–∞—à–ª–∏.
                order_index: categoryOrderIndex,
            },
            create: {
                // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –µ–µ
                name: categoryName,
                order_index: categoryOrderIndex,
            },
        });

        console.log(`[–ö–∞—Ç–µ–≥–æ—Ä–∏—è] –°–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–∞–π–¥–µ–Ω–∞: ${category.name}`);
        categoryOrderIndex++;

        const products = scrapedData[categoryName];

        // 3. –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥—É–∫—Ç—É –≤ —Ç–µ–∫—É—â–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for (const productData of products) {
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–æ–¥—É–∫—Ç–∞ –µ—Å—Ç—å –∏–º—è, –∏–Ω–∞—á–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if (!productData.name) continue;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            await prisma.product.upsert({
                where: { name: productData.name }, // –ò—â–µ–º –ø—Ä–æ–¥—É–∫—Ç –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –∏–º–µ–Ω–∏
                update: {
                    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–π–¥–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                    price: productData.price,
                    description: productData.composition || "", // –°–æ—Å—Ç–∞–≤ –∏–¥–µ—Ç –≤ –æ–ø–∏—Å–∞–Ω–∏–µ
                    image_url: productData.imageUrl,
                    category_id: category.id, // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                },
                create: {
                    // –ï—Å–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                    name: productData.name,
                    price: productData.price,
                    description: productData.composition || "", // –ü–æ–ª–µ 'composition' –∏–∑ JSON -> –ø–æ–ª–µ 'description' –≤ –ë–î
                    image_url: productData.imageUrl, // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ
                    category_id: category.id, // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç –∫ ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                },
            });
            console.log(`  -> [–ü—Ä–æ–¥—É–∫—Ç] –°–æ–∑–¥–∞–Ω –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: ${productData.name}`);
        }
    }

    console.log(`\nüü¢ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω.`);
}

// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
// –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç –ë–î.
main()
    .catch((e) => {
        console.error('üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', e);
        process.exit(1);
    })
    .finally(async () => {
        // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω—Ü–µ
        await prisma.$disconnect();
    });