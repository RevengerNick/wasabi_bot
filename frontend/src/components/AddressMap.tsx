// src/components/AddressMap.tsx
import React, { useState, useCallback, forwardRef, useImperativeHandle } from 'react';
import { GoogleMap, useJsApiLoader } from '@react-google-maps/api';
import { useDebouncedCallback } from 'use-debounce';

const containerStyle = {
  width: '100%',
  height: '100%'
};

// –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ü–µ–Ω—Ç—Ä –¢–∞—à–∫–µ–Ω—Ç–∞)
const initialCenter = {
  lat: 41.2995,
  lng: 69.2401
};

interface AddressMapProps {
  onLocationChange: (lat: number, lng: number) => void;
}

export interface AddressMapRef {
  panToCurrentUserLocation: () => void;
}

const AddressMap = forwardRef<AddressMapRef, AddressMapProps>(({ onLocationChange }, ref) => {
  const { isLoaded, loadError } = useJsApiLoader({
    id: 'google-map-script',
    googleMapsApiKey: import.meta.env.VITE_GOOGLE_MAPS_API_KEY!, // –ö–ª—é—á –∏–∑ .env —Ñ–∞–π–ª–∞
  });

  const [center, setCenter] = useState(initialCenter);

  // Debounced-—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ onLocationChange
  const debouncedLocationChange = useDebouncedCallback((lat, lng) => {
    onLocationChange(lat, lng);
  }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É

  const handleCenterChanged = () => {
    if (mapRef.current) {
      const newCenter = mapRef.current.getCenter()?.toJSON();
      if (newCenter) {
        setCenter(newCenter);
        debouncedLocationChange(newCenter.lat, newCenter.lng);
      }
    }
  };

  const mapRef = React.useRef<google.maps.Map | null>(null);
  const onLoad = useCallback((map: google.maps.Map) => {
    mapRef.current = map;
  }, []);
  const onUnmount = useCallback(() => {
    mapRef.current = null;
  }, []);

const panToCurrentUserLocation = () => {
    if (navigator.geolocation && mapRef.current) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const pos = {
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          };
          mapRef.current?.panTo(pos); // panTo - –ø–ª–∞–≤–Ω–æ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç –∫–∞—Ä—Ç—É
          setCenter(pos);
          onLocationChange(pos.lat, pos.lng); // –°—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å
        },
        () => {
          alert('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ.');
        }
      );
    }
  };
  
  // "–ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º" —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞—Ä—É–∂—É —á–µ—Ä–µ–∑ ref
  useImperativeHandle(ref, () => ({
    panToCurrentUserLocation,
  }));

  if (loadError) return <div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã</div>;
  if (!isLoaded) return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</div>;

  return (
    <div className="relative w-full h-full">
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={center}
        zoom={15}
        onLoad={onLoad}
        onUnmount={onUnmount}
        onDragEnd={handleCenterChanged} // –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
        options={{
          disableDefaultUI: true, // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ Google
          zoomControl: true,
        }}
      >
      </GoogleMap>
      {/* –ú–∞—Ä–∫–µ—Ä, –ø—Ä–∏–±–∏—Ç—ã–π –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞ */}
      <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2">
        <div className="w-12 h-12 flex items-center justify-center">
            {/* –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –∏–∫–æ–Ω–∫—É –º–∞—Ä–∫–µ—Ä–∞ */}
            <span className="text-4xl">üìç</span>
        </div>
      </div>
    </div>
  );
});

export default AddressMap;